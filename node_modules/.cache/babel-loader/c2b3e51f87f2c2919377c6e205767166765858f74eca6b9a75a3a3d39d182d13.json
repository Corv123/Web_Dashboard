{"ast":null,"code":"// Utility functions for processing and normalizing API response data\n\n/**\r\n * Process and normalize user data from API responses\r\n * @param {Array} users - Raw users data from API\r\n * @returns {Array} - Processed and normalized users data\r\n */\nexport const processUsersData = users => {\n  if (!Array.isArray(users)) return [];\n  return users.map(user => ({\n    // Keep original data\n    ...user,\n    // Ensure consistent ID mapping\n    id: user.user_id || user._id || user.id,\n    // Create convenient property aliases\n    gender: user.user_gender || 'Unknown',\n    mobile: user.user_mobile_number,\n    email: user.user_email,\n    darkMode: user.user_allow_dark_mode,\n    roundUpPref: user.user_round_up_pref,\n    discountDonate: user.user_discount_donate,\n    loginStatus: user.user_login_status,\n    defaultDonationMethod: user.user_default_donation_method,\n    // Normalize common fields\n    username: user.username || '',\n    tokens: Number(user.tokens) || 0\n  }));\n};\n\n/**\r\n * Process and normalize donations data from API responses\r\n * @param {Array} donations - Raw donations data from API\r\n * @returns {Array} - Processed and normalized donations data\r\n */\nexport const processDonationsData = donations => {\n  if (!Array.isArray(donations)) return [];\n  return donations.map(donation => ({\n    // Keep original data\n    ...donation,\n    // Ensure consistent ID mapping\n    id: donation._id || donation.donation_id || donation.id,\n    // Create convenient property aliases and normalize types\n    amount: Number(donation.donation_amt) || 0,\n    dsgd_amount: Number(donation.donation_dsgd_amt) || 0,\n    datetime: donation.donation_datetime,\n    charity_id: donation.charity_id,\n    status: donation.donation_status || 'pending',\n    type: donation.donation_type || 'standard',\n    cause: donation.donation_cause || 'general',\n    user_id: donation.user_id,\n    // Add formatted datetime if available\n    formattedDatetime: donation.donation_datetime ? new Date(donation.donation_datetime).toLocaleString() : null\n  }));\n};\n\n/**\r\n * Process and normalize orders data from API responses\r\n * @param {Array} orders - Raw orders data from API\r\n * @returns {Array} - Processed and normalized orders data\r\n */\nexport const processOrdersData = orders => {\n  if (!Array.isArray(orders)) return [];\n  return orders.map(order => ({\n    // Keep original data\n    ...order,\n    // Ensure consistent ID mapping\n    id: order.order_id || order._id || order.id,\n    // Create convenient property aliases and normalize types\n    cost: Number(order.order_cost) || 0,\n    totalCost: Number(order.total_order_cost) || 0,\n    status: order.order_status || 'pending',\n    type: order.order_type || 'standard',\n    merchant: order.merchant_name || '',\n    location: order.merchant_location || '',\n    datetime: order.order_complete_datetime,\n    userId: order.user_id,\n    tokens: Number(order.order_tokens) || 0,\n    items: Array.isArray(order.order_items) ? order.order_items : [],\n    // Add calculated fields\n    itemCount: Array.isArray(order.order_items) ? order.order_items.length : 0,\n    formattedDatetime: order.order_complete_datetime ? new Date(order.order_complete_datetime).toLocaleString() : null\n  }));\n};\n\n/**\r\n * Normalize API response structure - handles different response formats\r\n * @param {Object|Array} data - Raw API response data\r\n * @param {String} dataKey - Key to look for in response object (e.g., 'users', 'donations', 'orders')\r\n * @returns {Array} - Normalized array of data\r\n */\nexport const normalizeApiResponse = (data, dataKey = null) => {\n  // If already an array, return as is\n  if (Array.isArray(data)) {\n    return data;\n  }\n\n  // Handle object responses with various structures\n  if (data && typeof data === 'object') {\n    // Check for nested result structure\n    if (data.result && Array.isArray(data.result.data)) {\n      return data.result.data;\n    }\n\n    // Check for direct data property\n    if (data.data && Array.isArray(data.data)) {\n      return data.data;\n    }\n\n    // Check for specific data key if provided\n    if (dataKey && data[dataKey] && Array.isArray(data[dataKey])) {\n      return data[dataKey];\n    }\n  }\n\n  // Return empty array if no valid structure found\n  console.warn('Unexpected API response structure:', data);\n  return [];\n};\n\n/**\r\n * Filter users by various criteria\r\n * @param {Array} users - Processed users data\r\n * @param {Object} filters - Filter criteria\r\n * @returns {Array} - Filtered users\r\n */\nexport const filterUsers = (users, filters = {}) => {\n  if (!Array.isArray(users)) return [];\n  return users.filter(user => {\n    // Filter by login status\n    if (filters.loginStatus && user.loginStatus !== filters.loginStatus) {\n      return false;\n    }\n\n    // Filter by gender\n    if (filters.gender && user.gender !== filters.gender) {\n      return false;\n    }\n\n    // Filter by dark mode preference\n    if (filters.darkMode !== undefined && user.darkMode !== filters.darkMode) {\n      return false;\n    }\n\n    // Filter by search term (username, email)\n    if (filters.search) {\n      var _user$username, _user$email;\n      const searchTerm = filters.search.toLowerCase();\n      const matchesUsername = (_user$username = user.username) === null || _user$username === void 0 ? void 0 : _user$username.toLowerCase().includes(searchTerm);\n      const matchesEmail = (_user$email = user.email) === null || _user$email === void 0 ? void 0 : _user$email.toLowerCase().includes(searchTerm);\n      if (!matchesUsername && !matchesEmail) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n\n/**\r\n * Filter donations by various criteria\r\n * @param {Array} donations - Processed donations data\r\n * @param {Object} filters - Filter criteria\r\n * @returns {Array} - Filtered donations\r\n */\nexport const filterDonations = (donations, filters = {}) => {\n  if (!Array.isArray(donations)) return [];\n  return donations.filter(donation => {\n    // Filter by status\n    if (filters.status && donation.status !== filters.status) {\n      return false;\n    }\n\n    // Filter by type\n    if (filters.type && donation.type !== filters.type) {\n      return false;\n    }\n\n    // Filter by cause\n    if (filters.cause && donation.cause !== filters.cause) {\n      return false;\n    }\n\n    // Filter by amount range\n    if (filters.minAmount !== undefined && donation.amount < filters.minAmount) {\n      return false;\n    }\n    if (filters.maxAmount !== undefined && donation.amount > filters.maxAmount) {\n      return false;\n    }\n\n    // Filter by date range\n    if (filters.startDate && donation.datetime) {\n      const donationDate = new Date(donation.datetime);\n      if (donationDate < new Date(filters.startDate)) {\n        return false;\n      }\n    }\n    if (filters.endDate && donation.datetime) {\n      const donationDate = new Date(donation.datetime);\n      if (donationDate > new Date(filters.endDate)) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n\n/**\r\n * Filter orders by various criteria\r\n * @param {Array} orders - Processed orders data\r\n * @param {Object} filters - Filter criteria\r\n * @returns {Array} - Filtered orders\r\n */\nexport const filterOrders = (orders, filters = {}) => {\n  if (!Array.isArray(orders)) return [];\n  return orders.filter(order => {\n    // Filter by status\n    if (filters.status && order.status !== filters.status) {\n      return false;\n    }\n\n    // Filter by type\n    if (filters.type && order.type !== filters.type) {\n      return false;\n    }\n\n    // Filter by merchant\n    if (filters.merchant) {\n      var _order$merchant;\n      const searchTerm = filters.merchant.toLowerCase();\n      if (!((_order$merchant = order.merchant) !== null && _order$merchant !== void 0 && _order$merchant.toLowerCase().includes(searchTerm))) {\n        return false;\n      }\n    }\n\n    // Filter by cost range\n    if (filters.minCost !== undefined && order.totalCost < filters.minCost) {\n      return false;\n    }\n    if (filters.maxCost !== undefined && order.totalCost > filters.maxCost) {\n      return false;\n    }\n\n    // Filter by date range\n    if (filters.startDate && order.datetime) {\n      const orderDate = new Date(order.datetime);\n      if (orderDate < new Date(filters.startDate)) {\n        return false;\n      }\n    }\n    if (filters.endDate && order.datetime) {\n      const orderDate = new Date(order.datetime);\n      if (orderDate > new Date(filters.endDate)) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n\n/**\r\n * Sort data by specified field and direction\r\n * @param {Array} data - Data to sort\r\n * @param {String} field - Field to sort by\r\n * @param {String} direction - 'asc' or 'desc'\r\n * @returns {Array} - Sorted data\r\n */\nexport const sortData = (data, field, direction = 'asc') => {\n  if (!Array.isArray(data)) return [];\n  return [...data].sort((a, b) => {\n    const aVal = a[field];\n    const bVal = b[field];\n\n    // Handle null/undefined values\n    if (aVal == null && bVal == null) return 0;\n    if (aVal == null) return direction === 'asc' ? 1 : -1;\n    if (bVal == null) return direction === 'asc' ? -1 : 1;\n\n    // Handle string comparison\n    if (typeof aVal === 'string' && typeof bVal === 'string') {\n      const comparison = aVal.localeCompare(bVal);\n      return direction === 'asc' ? comparison : -comparison;\n    }\n\n    // Handle number/date comparison\n    if (aVal < bVal) return direction === 'asc' ? -1 : 1;\n    if (aVal > bVal) return direction === 'asc' ? 1 : -1;\n    return 0;\n  });\n};\n\n/**\r\n * Calculate aggregate statistics for data sets\r\n * @param {Object} data - Object containing users, donations, and orders arrays\r\n * @returns {Object} - Calculated statistics\r\n */\nexport const calculateStats = (data = {}) => {\n  const {\n    users = [],\n    donations = [],\n    orders = []\n  } = data;\n  return {\n    // User stats\n    totalUsers: users.length,\n    activeUsers: users.filter(user => user.loginStatus === 'active').length,\n    usersByGender: users.reduce((acc, user) => {\n      acc[user.gender] = (acc[user.gender] || 0) + 1;\n      return acc;\n    }, {}),\n    // Donation stats\n    totalDonations: donations.length,\n    totalDonationAmount: donations.reduce((sum, donation) => sum + (donation.amount || 0), 0),\n    averageDonationAmount: donations.length > 0 ? donations.reduce((sum, donation) => sum + (donation.amount || 0), 0) / donations.length : 0,\n    donationsByStatus: donations.reduce((acc, donation) => {\n      acc[donation.status] = (acc[donation.status] || 0) + 1;\n      return acc;\n    }, {}),\n    // Order stats\n    totalOrders: orders.length,\n    totalOrderValue: orders.reduce((sum, order) => sum + (order.totalCost || 0), 0),\n    averageOrderValue: orders.length > 0 ? orders.reduce((sum, order) => sum + (order.totalCost || 0), 0) / orders.length : 0,\n    ordersByStatus: orders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {})\n  };\n};","map":{"version":3,"names":["processUsersData","users","Array","isArray","map","user","id","user_id","_id","gender","user_gender","mobile","user_mobile_number","email","user_email","darkMode","user_allow_dark_mode","roundUpPref","user_round_up_pref","discountDonate","user_discount_donate","loginStatus","user_login_status","defaultDonationMethod","user_default_donation_method","username","tokens","Number","processDonationsData","donations","donation","donation_id","amount","donation_amt","dsgd_amount","donation_dsgd_amt","datetime","donation_datetime","charity_id","status","donation_status","type","donation_type","cause","donation_cause","formattedDatetime","Date","toLocaleString","processOrdersData","orders","order","order_id","cost","order_cost","totalCost","total_order_cost","order_status","order_type","merchant","merchant_name","location","merchant_location","order_complete_datetime","userId","order_tokens","items","order_items","itemCount","length","normalizeApiResponse","data","dataKey","result","console","warn","filterUsers","filters","filter","undefined","search","_user$username","_user$email","searchTerm","toLowerCase","matchesUsername","includes","matchesEmail","filterDonations","minAmount","maxAmount","startDate","donationDate","endDate","filterOrders","_order$merchant","minCost","maxCost","orderDate","sortData","field","direction","sort","a","b","aVal","bVal","comparison","localeCompare","calculateStats","totalUsers","activeUsers","usersByGender","reduce","acc","totalDonations","totalDonationAmount","sum","averageDonationAmount","donationsByStatus","totalOrders","totalOrderValue","averageOrderValue","ordersByStatus"],"sources":["C:/Users/mingj/Downloads/Web_Dashboard/src/utils/dataProcessor.js"],"sourcesContent":["// Utility functions for processing and normalizing API response data\r\n\r\n/**\r\n * Process and normalize user data from API responses\r\n * @param {Array} users - Raw users data from API\r\n * @returns {Array} - Processed and normalized users data\r\n */\r\nexport const processUsersData = (users) => {\r\n  if (!Array.isArray(users)) return [];\r\n  \r\n  return users.map(user => ({\r\n    // Keep original data\r\n    ...user,\r\n    \r\n    // Ensure consistent ID mapping\r\n    id: user.user_id || user._id || user.id,\r\n    \r\n    // Create convenient property aliases\r\n    gender: user.user_gender || 'Unknown',\r\n    mobile: user.user_mobile_number,\r\n    email: user.user_email,\r\n    darkMode: user.user_allow_dark_mode,\r\n    roundUpPref: user.user_round_up_pref,\r\n    discountDonate: user.user_discount_donate,\r\n    loginStatus: user.user_login_status,\r\n    defaultDonationMethod: user.user_default_donation_method,\r\n    \r\n    // Normalize common fields\r\n    username: user.username || '',\r\n    tokens: Number(user.tokens) || 0,\r\n  }));\r\n};\r\n\r\n/**\r\n * Process and normalize donations data from API responses\r\n * @param {Array} donations - Raw donations data from API\r\n * @returns {Array} - Processed and normalized donations data\r\n */\r\nexport const processDonationsData = (donations) => {\r\n  if (!Array.isArray(donations)) return [];\r\n  \r\n  return donations.map(donation => ({\r\n    // Keep original data\r\n    ...donation,\r\n    \r\n    // Ensure consistent ID mapping\r\n    id: donation._id || donation.donation_id || donation.id,\r\n    \r\n    // Create convenient property aliases and normalize types\r\n    amount: Number(donation.donation_amt) || 0,\r\n    dsgd_amount: Number(donation.donation_dsgd_amt) || 0,\r\n    datetime: donation.donation_datetime,\r\n    charity_id: donation.charity_id,\r\n    status: donation.donation_status || 'pending',\r\n    type: donation.donation_type || 'standard',\r\n    cause: donation.donation_cause || 'general',\r\n    user_id: donation.user_id,\r\n    \r\n    // Add formatted datetime if available\r\n    formattedDatetime: donation.donation_datetime \r\n      ? new Date(donation.donation_datetime).toLocaleString()\r\n      : null,\r\n  }));\r\n};\r\n\r\n/**\r\n * Process and normalize orders data from API responses\r\n * @param {Array} orders - Raw orders data from API\r\n * @returns {Array} - Processed and normalized orders data\r\n */\r\nexport const processOrdersData = (orders) => {\r\n  if (!Array.isArray(orders)) return [];\r\n  \r\n  return orders.map(order => ({\r\n    // Keep original data\r\n    ...order,\r\n    \r\n    // Ensure consistent ID mapping\r\n    id: order.order_id || order._id || order.id,\r\n    \r\n    // Create convenient property aliases and normalize types\r\n    cost: Number(order.order_cost) || 0,\r\n    totalCost: Number(order.total_order_cost) || 0,\r\n    status: order.order_status || 'pending',\r\n    type: order.order_type || 'standard',\r\n    merchant: order.merchant_name || '',\r\n    location: order.merchant_location || '',\r\n    datetime: order.order_complete_datetime,\r\n    userId: order.user_id,\r\n    tokens: Number(order.order_tokens) || 0,\r\n    items: Array.isArray(order.order_items) ? order.order_items : [],\r\n    \r\n    // Add calculated fields\r\n    itemCount: Array.isArray(order.order_items) ? order.order_items.length : 0,\r\n    formattedDatetime: order.order_complete_datetime \r\n      ? new Date(order.order_complete_datetime).toLocaleString()\r\n      : null,\r\n  }));\r\n};\r\n\r\n/**\r\n * Normalize API response structure - handles different response formats\r\n * @param {Object|Array} data - Raw API response data\r\n * @param {String} dataKey - Key to look for in response object (e.g., 'users', 'donations', 'orders')\r\n * @returns {Array} - Normalized array of data\r\n */\r\nexport const normalizeApiResponse = (data, dataKey = null) => {\r\n  // If already an array, return as is\r\n  if (Array.isArray(data)) {\r\n    return data;\r\n  }\r\n  \r\n  // Handle object responses with various structures\r\n  if (data && typeof data === 'object') {\r\n    // Check for nested result structure\r\n    if (data.result && Array.isArray(data.result.data)) {\r\n      return data.result.data;\r\n    }\r\n    \r\n    // Check for direct data property\r\n    if (data.data && Array.isArray(data.data)) {\r\n      return data.data;\r\n    }\r\n    \r\n    // Check for specific data key if provided\r\n    if (dataKey && data[dataKey] && Array.isArray(data[dataKey])) {\r\n      return data[dataKey];\r\n    }\r\n  }\r\n  \r\n  // Return empty array if no valid structure found\r\n  console.warn('Unexpected API response structure:', data);\r\n  return [];\r\n};\r\n\r\n/**\r\n * Filter users by various criteria\r\n * @param {Array} users - Processed users data\r\n * @param {Object} filters - Filter criteria\r\n * @returns {Array} - Filtered users\r\n */\r\nexport const filterUsers = (users, filters = {}) => {\r\n  if (!Array.isArray(users)) return [];\r\n  \r\n  return users.filter(user => {\r\n    // Filter by login status\r\n    if (filters.loginStatus && user.loginStatus !== filters.loginStatus) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by gender\r\n    if (filters.gender && user.gender !== filters.gender) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by dark mode preference\r\n    if (filters.darkMode !== undefined && user.darkMode !== filters.darkMode) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by search term (username, email)\r\n    if (filters.search) {\r\n      const searchTerm = filters.search.toLowerCase();\r\n      const matchesUsername = user.username?.toLowerCase().includes(searchTerm);\r\n      const matchesEmail = user.email?.toLowerCase().includes(searchTerm);\r\n      if (!matchesUsername && !matchesEmail) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  });\r\n};\r\n\r\n/**\r\n * Filter donations by various criteria\r\n * @param {Array} donations - Processed donations data\r\n * @param {Object} filters - Filter criteria\r\n * @returns {Array} - Filtered donations\r\n */\r\nexport const filterDonations = (donations, filters = {}) => {\r\n  if (!Array.isArray(donations)) return [];\r\n  \r\n  return donations.filter(donation => {\r\n    // Filter by status\r\n    if (filters.status && donation.status !== filters.status) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by type\r\n    if (filters.type && donation.type !== filters.type) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by cause\r\n    if (filters.cause && donation.cause !== filters.cause) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by amount range\r\n    if (filters.minAmount !== undefined && donation.amount < filters.minAmount) {\r\n      return false;\r\n    }\r\n    if (filters.maxAmount !== undefined && donation.amount > filters.maxAmount) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by date range\r\n    if (filters.startDate && donation.datetime) {\r\n      const donationDate = new Date(donation.datetime);\r\n      if (donationDate < new Date(filters.startDate)) {\r\n        return false;\r\n      }\r\n    }\r\n    if (filters.endDate && donation.datetime) {\r\n      const donationDate = new Date(donation.datetime);\r\n      if (donationDate > new Date(filters.endDate)) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  });\r\n};\r\n\r\n/**\r\n * Filter orders by various criteria\r\n * @param {Array} orders - Processed orders data\r\n * @param {Object} filters - Filter criteria\r\n * @returns {Array} - Filtered orders\r\n */\r\nexport const filterOrders = (orders, filters = {}) => {\r\n  if (!Array.isArray(orders)) return [];\r\n  \r\n  return orders.filter(order => {\r\n    // Filter by status\r\n    if (filters.status && order.status !== filters.status) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by type\r\n    if (filters.type && order.type !== filters.type) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by merchant\r\n    if (filters.merchant) {\r\n      const searchTerm = filters.merchant.toLowerCase();\r\n      if (!order.merchant?.toLowerCase().includes(searchTerm)) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Filter by cost range\r\n    if (filters.minCost !== undefined && order.totalCost < filters.minCost) {\r\n      return false;\r\n    }\r\n    if (filters.maxCost !== undefined && order.totalCost > filters.maxCost) {\r\n      return false;\r\n    }\r\n    \r\n    // Filter by date range\r\n    if (filters.startDate && order.datetime) {\r\n      const orderDate = new Date(order.datetime);\r\n      if (orderDate < new Date(filters.startDate)) {\r\n        return false;\r\n      }\r\n    }\r\n    if (filters.endDate && order.datetime) {\r\n      const orderDate = new Date(order.datetime);\r\n      if (orderDate > new Date(filters.endDate)) {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  });\r\n};\r\n\r\n/**\r\n * Sort data by specified field and direction\r\n * @param {Array} data - Data to sort\r\n * @param {String} field - Field to sort by\r\n * @param {String} direction - 'asc' or 'desc'\r\n * @returns {Array} - Sorted data\r\n */\r\nexport const sortData = (data, field, direction = 'asc') => {\r\n  if (!Array.isArray(data)) return [];\r\n  \r\n  return [...data].sort((a, b) => {\r\n    const aVal = a[field];\r\n    const bVal = b[field];\r\n    \r\n    // Handle null/undefined values\r\n    if (aVal == null && bVal == null) return 0;\r\n    if (aVal == null) return direction === 'asc' ? 1 : -1;\r\n    if (bVal == null) return direction === 'asc' ? -1 : 1;\r\n    \r\n    // Handle string comparison\r\n    if (typeof aVal === 'string' && typeof bVal === 'string') {\r\n      const comparison = aVal.localeCompare(bVal);\r\n      return direction === 'asc' ? comparison : -comparison;\r\n    }\r\n    \r\n    // Handle number/date comparison\r\n    if (aVal < bVal) return direction === 'asc' ? -1 : 1;\r\n    if (aVal > bVal) return direction === 'asc' ? 1 : -1;\r\n    return 0;\r\n  });\r\n};\r\n\r\n/**\r\n * Calculate aggregate statistics for data sets\r\n * @param {Object} data - Object containing users, donations, and orders arrays\r\n * @returns {Object} - Calculated statistics\r\n */\r\nexport const calculateStats = (data = {}) => {\r\n  const { users = [], donations = [], orders = [] } = data;\r\n  \r\n  return {\r\n    // User stats\r\n    totalUsers: users.length,\r\n    activeUsers: users.filter(user => user.loginStatus === 'active').length,\r\n    usersByGender: users.reduce((acc, user) => {\r\n      acc[user.gender] = (acc[user.gender] || 0) + 1;\r\n      return acc;\r\n    }, {}),\r\n    \r\n    // Donation stats\r\n    totalDonations: donations.length,\r\n    totalDonationAmount: donations.reduce((sum, donation) => sum + (donation.amount || 0), 0),\r\n    averageDonationAmount: donations.length > 0 \r\n      ? donations.reduce((sum, donation) => sum + (donation.amount || 0), 0) / donations.length \r\n      : 0,\r\n    donationsByStatus: donations.reduce((acc, donation) => {\r\n      acc[donation.status] = (acc[donation.status] || 0) + 1;\r\n      return acc;\r\n    }, {}),\r\n    \r\n    // Order stats\r\n    totalOrders: orders.length,\r\n    totalOrderValue: orders.reduce((sum, order) => sum + (order.totalCost || 0), 0),\r\n    averageOrderValue: orders.length > 0 \r\n      ? orders.reduce((sum, order) => sum + (order.totalCost || 0), 0) / orders.length \r\n      : 0,\r\n    ordersByStatus: orders.reduce((acc, order) => {\r\n      acc[order.status] = (acc[order.status] || 0) + 1;\r\n      return acc;\r\n    }, {}),\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}