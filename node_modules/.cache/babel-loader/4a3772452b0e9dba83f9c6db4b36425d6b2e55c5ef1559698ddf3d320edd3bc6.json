{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\n// Extract the data processing logic into custom hooks:\n// - useOrdersData()\n// - useDonationsData()\n// - useUsersData()\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { getAllUsers as fetchAllUsers, getAllDonations as fetchAllDonations, getAllOrders as fetchAllOrders, getUserById as fetchUserById, getDonationById as fetchDonationById, getOrderById as fetchOrderById, testApiConnection as testConnection } from '../services/api.js';\nimport { processUsersData, processDonationsData, processOrdersData } from '../utils/dataProcessors';\n\n// Custom hook for managing API data\nexport const useApiData = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [donations, setDonations] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load all data\n  const loadAllData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [usersData, donationsData, ordersData] = await Promise.all([fetchAllUsers(), fetchAllDonations(), fetchAllOrders()]);\n      setUsers(processUsersData(usersData));\n      setDonations(processDonationsData(donationsData));\n      setOrders(processOrdersData(ordersData));\n    } catch (err) {\n      setError(err.message);\n      console.error('Failed to load all data:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load users only\n  const loadUsers = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usersData = await fetchAllUsers();\n      setUsers(processUsersData(usersData));\n    } catch (err) {\n      setError(err.message);\n      console.error('Failed to load users:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load donations only\n  const loadDonations = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const donationsData = await fetchAllDonations();\n      setDonations(processDonationsData(donationsData));\n    } catch (err) {\n      setError(err.message);\n      console.error('Failed to load donations:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load orders only\n  const loadOrders = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const ordersData = await fetchAllOrders();\n      setOrders(processOrdersData(ordersData));\n    } catch (err) {\n      setError(err.message);\n      console.error('Failed to load orders:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Refresh all data\n  const refreshData = useCallback(() => {\n    loadAllData();\n  }, [loadAllData]);\n  return {\n    // Data\n    users,\n    donations,\n    orders,\n    // State\n    loading,\n    error,\n    // Actions\n    loadAllData,\n    loadUsers,\n    loadDonations,\n    loadOrders,\n    refreshData,\n    // Setters for external updates\n    setUsers,\n    setDonations,\n    setOrders\n  };\n};\n\n// Hook for individual item fetching\n_s(useApiData, \"avr+a+93XNwKjJcZm21cdpkes+s=\");\nexport const useApiItem = () => {\n  _s2();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const getUser = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const userData = await fetchUserById(id);\n      return userData;\n    } catch (err) {\n      setError(err.message);\n      console.error(`Failed to load user ${id}:`, err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getDonation = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const donationData = await fetchDonationById(id);\n      return donationData;\n    } catch (err) {\n      setError(err.message);\n      console.error(`Failed to load donation ${id}:`, err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getOrder = useCallback(async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const orderData = await fetchOrderById(id);\n      return orderData;\n    } catch (err) {\n      setError(err.message);\n      console.error(`Failed to load order ${id}:`, err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return {\n    loading,\n    error,\n    getUser,\n    getDonation,\n    getOrder\n  };\n};\n\n// Hook for API connection testing\n_s2(useApiItem, \"TFjLWuIWlpad0cGdDHn1BbpUOCI=\");\nexport const useApiConnection = () => {\n  _s3();\n  const [isConnected, setIsConnected] = useState(null);\n  const [testing, setTesting] = useState(false);\n  const testConnection = useCallback(async () => {\n    setTesting(true);\n    try {\n      const connected = await testConnection();\n      setIsConnected(connected);\n      return connected;\n    } catch (err) {\n      setIsConnected(false);\n      console.error('Connection test failed:', err);\n      return false;\n    } finally {\n      setTesting(false);\n    }\n  }, []);\n\n  // Test connection on mount\n  useEffect(() => {\n    testConnection();\n  }, [testConnection]);\n  return {\n    isConnected,\n    testing,\n    testConnection\n  };\n};\n\n// Hook for dashboard data (combines all data with auto-loading)\n_s3(useApiConnection, \"oIcmCCysnplIlMx2aUy/oaGjpQI=\");\nexport const useDashboardData = () => {\n  _s4();\n  const {\n    users,\n    donations,\n    orders,\n    loading,\n    error,\n    loadAllData,\n    refreshData\n  } = useApiData();\n\n  // Auto-load data on mount\n  useEffect(() => {\n    loadAllData();\n  }, [loadAllData]);\n\n  // Calculate dashboard stats\n  const stats = {\n    totalUsers: users.length,\n    totalDonations: donations.length,\n    totalOrders: orders.length,\n    totalDonationAmount: donations.reduce((sum, donation) => sum + (donation.amount || 0), 0),\n    totalOrderValue: orders.reduce((sum, order) => sum + (order.totalCost || 0), 0),\n    activeUsers: users.filter(user => user.loginStatus === 'active').length\n  };\n  return {\n    // Data\n    users,\n    donations,\n    orders,\n    stats,\n    // State\n    loading,\n    error,\n    // Actions\n    refreshData\n  };\n};\n_s4(useDashboardData, \"9QhWbk8tlGbxHvwgYDFLx7U3xI0=\", false, function () {\n  return [useApiData];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","getAllUsers","fetchAllUsers","getAllDonations","fetchAllDonations","getAllOrders","fetchAllOrders","getUserById","fetchUserById","getDonationById","fetchDonationById","getOrderById","fetchOrderById","testApiConnection","testConnection","processUsersData","processDonationsData","processOrdersData","useApiData","_s","users","setUsers","donations","setDonations","orders","setOrders","loading","setLoading","error","setError","loadAllData","usersData","donationsData","ordersData","Promise","all","err","message","console","loadUsers","loadDonations","loadOrders","refreshData","useApiItem","_s2","getUser","id","userData","getDonation","donationData","getOrder","orderData","useApiConnection","_s3","isConnected","setIsConnected","testing","setTesting","connected","useDashboardData","_s4","stats","totalUsers","length","totalDonations","totalOrders","totalDonationAmount","reduce","sum","donation","amount","totalOrderValue","order","totalCost","activeUsers","filter","user","loginStatus"],"sources":["C:/Users/mingj/Downloads/Web_Dashboard/src/hooks/useChartData.js"],"sourcesContent":["// Extract the data processing logic into custom hooks:\r\n// - useOrdersData()\r\n// - useDonationsData()\r\n// - useUsersData()\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  getAllUsers as fetchAllUsers,\r\n  getAllDonations as fetchAllDonations,\r\n  getAllOrders as fetchAllOrders,\r\n  getUserById as fetchUserById,\r\n  getDonationById as fetchDonationById,\r\n  getOrderById as fetchOrderById,\r\n  testApiConnection as testConnection\r\n} from '../services/api.js';\r\nimport { processUsersData, processDonationsData, processOrdersData } from '../utils/dataProcessors';\r\n\r\n// Custom hook for managing API data\r\nexport const useApiData = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [donations, setDonations] = useState([]);\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load all data\r\n  const loadAllData = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const [usersData, donationsData, ordersData] = await Promise.all([\r\n        fetchAllUsers(),\r\n        fetchAllDonations(),\r\n        fetchAllOrders()\r\n      ]);\r\n\r\n      setUsers(processUsersData(usersData));\r\n      setDonations(processDonationsData(donationsData));\r\n      setOrders(processOrdersData(ordersData));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Failed to load all data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Load users only\r\n  const loadUsers = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const usersData = await fetchAllUsers();\r\n      setUsers(processUsersData(usersData));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Failed to load users:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Load donations only\r\n  const loadDonations = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const donationsData = await fetchAllDonations();\r\n      setDonations(processDonationsData(donationsData));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Failed to load donations:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Load orders only\r\n  const loadOrders = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const ordersData = await fetchAllOrders();\r\n      setOrders(processOrdersData(ordersData));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Failed to load orders:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Refresh all data\r\n  const refreshData = useCallback(() => {\r\n    loadAllData();\r\n  }, [loadAllData]);\r\n\r\n  return {\r\n    // Data\r\n    users,\r\n    donations,\r\n    orders,\r\n    \r\n    // State\r\n    loading,\r\n    error,\r\n    \r\n    // Actions\r\n    loadAllData,\r\n    loadUsers,\r\n    loadDonations,\r\n    loadOrders,\r\n    refreshData,\r\n    \r\n    // Setters for external updates\r\n    setUsers,\r\n    setDonations,\r\n    setOrders\r\n  };\r\n};\r\n\r\n// Hook for individual item fetching\r\nexport const useApiItem = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const getUser = useCallback(async (id) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const userData = await fetchUserById(id);\r\n      return userData;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(`Failed to load user ${id}:`, err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const getDonation = useCallback(async (id) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const donationData = await fetchDonationById(id);\r\n      return donationData;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(`Failed to load donation ${id}:`, err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const getOrder = useCallback(async (id) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const orderData = await fetchOrderById(id);\r\n      return orderData;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error(`Failed to load order ${id}:`, err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getUser,\r\n    getDonation,\r\n    getOrder\r\n  };\r\n};\r\n\r\n// Hook for API connection testing\r\nexport const useApiConnection = () => {\r\n  const [isConnected, setIsConnected] = useState(null);\r\n  const [testing, setTesting] = useState(false);\r\n\r\n  const testConnection = useCallback(async () => {\r\n    setTesting(true);\r\n    try {\r\n      const connected = await testConnection();\r\n      setIsConnected(connected);\r\n      return connected;\r\n    } catch (err) {\r\n      setIsConnected(false);\r\n      console.error('Connection test failed:', err);\r\n      return false;\r\n    } finally {\r\n      setTesting(false);\r\n    }\r\n  }, []);\r\n\r\n  // Test connection on mount\r\n  useEffect(() => {\r\n    testConnection();\r\n  }, [testConnection]);\r\n\r\n  return {\r\n    isConnected,\r\n    testing,\r\n    testConnection\r\n  };\r\n};\r\n\r\n// Hook for dashboard data (combines all data with auto-loading)\r\nexport const useDashboardData = () => {\r\n  const { \r\n    users, \r\n    donations, \r\n    orders, \r\n    loading, \r\n    error, \r\n    loadAllData, \r\n    refreshData \r\n  } = useApiData();\r\n\r\n  // Auto-load data on mount\r\n  useEffect(() => {\r\n    loadAllData();\r\n  }, [loadAllData]);\r\n\r\n  // Calculate dashboard stats\r\n  const stats = {\r\n    totalUsers: users.length,\r\n    totalDonations: donations.length,\r\n    totalOrders: orders.length,\r\n    totalDonationAmount: donations.reduce((sum, donation) => sum + (donation.amount || 0), 0),\r\n    totalOrderValue: orders.reduce((sum, order) => sum + (order.totalCost || 0), 0),\r\n    activeUsers: users.filter(user => user.loginStatus === 'active').length\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    users,\r\n    donations,\r\n    orders,\r\n    stats,\r\n    \r\n    // State\r\n    loading,\r\n    error,\r\n    \r\n    // Actions\r\n    refreshData\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}