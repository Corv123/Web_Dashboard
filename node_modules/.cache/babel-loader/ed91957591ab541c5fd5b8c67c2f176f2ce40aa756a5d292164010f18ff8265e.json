{"ast":null,"code":"// Environment-based API configuration\nconst getApiBaseUrl = () => {\n  // Check if we're in development or production\n  if (process.env.NODE_ENV === 'production') {\n    // Use your production API URL\n    return process.env.REACT_APP_API_BASE_URL || 'https://your-production-domain.com/api/v1';\n  } else {\n    // For local development, use localhost\n    // If your React app and API server are on the same machine\n    return process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\n  }\n};\nconst API_BASE_URL = getApiBaseUrl();\n\n// Alternative: Direct configuration based on your setup\n// Uncomment one of these based on your actual setup:\n\n// Option 1: If React app and API server are on same machine (most common)\n// const API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// Option 2: If your API server is running on a specific IP in your local network\n// const API_BASE_URL = 'http://192.168.1.XXX:8000/api/v1'; // Replace XXX with actual IP\n\n// Option 3: If you're using Docker or a specific container setup\n// const API_BASE_URL = 'http://host.docker.internal:8000/api/v1';\n\n// Generic API error handler\nconst handleApiResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`API Error: ${response.status} - ${response.statusText}. ${errorText}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return await response.json();\n  }\n  return await response.text();\n};\n\n// Generic fetch function with error handling and better debugging\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log(`Making API request to: ${url}`);\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      mode: 'cors',\n      credentials: 'include',\n      // Include credentials for CORS\n      ...options\n    });\n    return await handleApiResponse(response);\n  } catch (error) {\n    console.error(`API request failed for ${endpoint}:`, error);\n    console.error(`Full URL was: ${url}`);\n\n    // More detailed error information\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      console.error('This might be a CORS or network connectivity issue');\n      console.error('Make sure your backend server is running and has CORS properly configured');\n      console.error('Backend should allow origin: http://localhost:3000');\n    }\n    throw error;\n  }\n};\n\n// Test connection function\nexport const testApiConnection = async () => {\n  try {\n    console.log(`Testing API connection to: ${API_BASE_URL}`);\n\n    // Try a simple health check or users endpoint\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors'\n    });\n    if (response.ok) {\n      console.log('✅ API connection successful');\n      return true;\n    } else {\n      console.error('❌ API connection failed:', response.status, response.statusText);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ API connection test failed:', error);\n    return false;\n  }\n};\n\n// Users API\nexport const getAllUsers = async () => {\n  try {\n    const data = await apiRequest('/users');\n    console.log('Users API response:', data);\n\n    // Handle different response structures\n    if (Array.isArray(data)) {\n      return data;\n    } else if (data.result && Array.isArray(data.result.data)) {\n      return data.result.data;\n    } else if (data.data && Array.isArray(data.data)) {\n      return data.data;\n    } else if (data.users && Array.isArray(data.users)) {\n      return data.users;\n    } else {\n      console.warn('Unexpected users API response structure:', data);\n      return [];\n    }\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n    return [];\n  }\n};\nexport const getUserById = async id => {\n  try {\n    const data = await apiRequest(`/users/${id}`);\n    console.log(`User ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to fetch user ${id}:`, error);\n    return null;\n  }\n};\nexport const createUser = async userData => {\n  try {\n    const data = await apiRequest('/users', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n    console.log('Create user API response:', data);\n    return data;\n  } catch (error) {\n    console.error('Failed to create user:', error);\n    throw error;\n  }\n};\nexport const updateUser = async (id, userData) => {\n  try {\n    const data = await apiRequest(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData)\n    });\n    console.log(`Update user ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to update user ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteUser = async id => {\n  try {\n    const data = await apiRequest(`/users/${id}`, {\n      method: 'DELETE'\n    });\n    console.log(`Delete user ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to delete user ${id}:`, error);\n    throw error;\n  }\n};\n\n// Donations API\nexport const getAllDonations = async () => {\n  try {\n    const data = await apiRequest('/donations');\n    console.log('Donations API response:', data);\n\n    // Handle different response structures\n    if (Array.isArray(data)) {\n      return data;\n    } else if (data.result && Array.isArray(data.result.data)) {\n      return data.result.data;\n    } else if (data.data && Array.isArray(data.data)) {\n      return data.data;\n    } else if (data.donations && Array.isArray(data.donations)) {\n      return data.donations;\n    } else {\n      console.warn('Unexpected donations API response structure:', data);\n      return [];\n    }\n  } catch (error) {\n    console.error('Failed to fetch donations:', error);\n    return [];\n  }\n};\nexport const getDonationById = async id => {\n  try {\n    const data = await apiRequest(`/donations/${id}`);\n    console.log(`Donation ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to fetch donation ${id}:`, error);\n    return null;\n  }\n};\nexport const createDonation = async donationData => {\n  try {\n    const data = await apiRequest('/donations', {\n      method: 'POST',\n      body: JSON.stringify(donationData)\n    });\n    console.log('Create donation API response:', data);\n    return data;\n  } catch (error) {\n    console.error('Failed to create donation:', error);\n    throw error;\n  }\n};\nexport const updateDonation = async (id, donationData) => {\n  try {\n    const data = await apiRequest(`/donations/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(donationData)\n    });\n    console.log(`Update donation ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to update donation ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteDonation = async id => {\n  try {\n    const data = await apiRequest(`/donations/${id}`, {\n      method: 'DELETE'\n    });\n    console.log(`Delete donation ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to delete donation ${id}:`, error);\n    throw error;\n  }\n};\n\n// Orders API\nexport const getAllOrders = async () => {\n  try {\n    const data = await apiRequest('/orders');\n    console.log('Orders API response:', data);\n\n    // Handle different response structures\n    if (Array.isArray(data)) {\n      return data;\n    } else if (data.result && Array.isArray(data.result.data)) {\n      return data.result.data;\n    } else if (data.data && Array.isArray(data.data)) {\n      return data.data;\n    } else if (data.orders && Array.isArray(data.orders)) {\n      return data.orders;\n    } else {\n      console.warn('Unexpected orders API response structure:', data);\n      return [];\n    }\n  } catch (error) {\n    console.error('Failed to fetch orders:', error);\n    return [];\n  }\n};\nexport const getOrderById = async id => {\n  try {\n    const data = await apiRequest(`/orders/${id}`);\n    console.log(`Order ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to fetch order ${id}:`, error);\n    return null;\n  }\n};\nexport const createOrder = async orderData => {\n  try {\n    const data = await apiRequest('/orders', {\n      method: 'POST',\n      body: JSON.stringify(orderData)\n    });\n    console.log('Create order API response:', data);\n    return data;\n  } catch (error) {\n    console.error('Failed to create order:', error);\n    throw error;\n  }\n};\nexport const updateOrder = async (id, orderData) => {\n  try {\n    const data = await apiRequest(`/orders/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(orderData)\n    });\n    console.log(`Update order ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to update order ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteOrder = async id => {\n  try {\n    const data = await apiRequest(`/orders/${id}`, {\n      method: 'DELETE'\n    });\n    console.log(`Delete order ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to delete order ${id}:`, error);\n    throw error;\n  }\n};\n\n// Utility functions for data processing\nexport const processUsersData = users => {\n  if (!Array.isArray(users)) return [];\n  return users.map(user => ({\n    ...user,\n    // Add any data transformations here\n    id: user._id || user.id,\n    gender: user.user_gender || 'Unknown'\n  }));\n};\nexport const processDonationsData = donations => {\n  if (!Array.isArray(donations)) return [];\n  return donations.map(donation => ({\n    ...donation,\n    // Add any data transformations here\n    id: donation._id || donation.donation_id,\n    amount: Number(donation.donation_amt) || 0,\n    dsgd_amount: Number(donation.donation_dsgd_amt) || 0,\n    datetime: donation.donation_datetime,\n    charity_id: donation.charity_id,\n    status: donation.donation_status,\n    type: donation.donation_type,\n    cause: donation.donation_cause,\n    user_id: donation.user_id\n  }));\n};\nexport const processOrdersData = orders => {\n  if (!Array.isArray(orders)) return [];\n  return orders.map(order => ({\n    ...order,\n    // Add any data transformations here\n    id: order._id || order.id,\n    cost: Number(order.order_cost) || 0,\n    merchant: order.merchant_name || 'Unknown'\n  }));\n};\n\n// Dashboard specific API calls\nexport const getDashboardData = async () => {\n  try {\n    const [users, donations, orders] = await Promise.all([getAllUsers(), getAllDonations(), getAllOrders()]);\n    return {\n      users: processUsersData(users),\n      donations: processDonationsData(donations),\n      orders: processOrdersData(orders)\n    };\n  } catch (error) {\n    console.error('Failed to fetch dashboard data:', error);\n    return {\n      users: [],\n      donations: [],\n      orders: []\n    };\n  }\n};\n\n// Export API base URL for other components if needed\nexport { API_BASE_URL };","map":{"version":3,"names":["getApiBaseUrl","process","env","NODE_ENV","REACT_APP_API_BASE_URL","API_BASE_URL","handleApiResponse","response","ok","errorText","text","Error","status","statusText","contentType","headers","get","includes","json","apiRequest","endpoint","options","url","console","log","fetch","mode","credentials","error","name","message","testApiConnection","method","getAllUsers","data","Array","isArray","result","users","warn","getUserById","id","createUser","userData","body","JSON","stringify","updateUser","deleteUser","getAllDonations","donations","getDonationById","createDonation","donationData","updateDonation","deleteDonation","getAllOrders","orders","getOrderById","createOrder","orderData","updateOrder","deleteOrder","processUsersData","map","user","_id","gender","user_gender","processDonationsData","donation","donation_id","amount","Number","donation_amt","dsgd_amount","donation_dsgd_amt","datetime","donation_datetime","charity_id","donation_status","type","donation_type","cause","donation_cause","user_id","processOrdersData","order","cost","order_cost","merchant","merchant_name","getDashboardData","Promise","all"],"sources":["C:/Users/mingj/Downloads/Web_Dashboard/src/services/api.js"],"sourcesContent":["// Environment-based API configuration\r\nconst getApiBaseUrl = () => {\r\n  // Check if we're in development or production\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // Use your production API URL\r\n    return process.env.REACT_APP_API_BASE_URL || 'https://your-production-domain.com/api/v1';\r\n  } else {\r\n    // For local development, use localhost\r\n    // If your React app and API server are on the same machine\r\n    return process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\r\n  }\r\n};\r\n\r\nconst API_BASE_URL = getApiBaseUrl();\r\n\r\n// Alternative: Direct configuration based on your setup\r\n// Uncomment one of these based on your actual setup:\r\n\r\n// Option 1: If React app and API server are on same machine (most common)\r\n// const API_BASE_URL = 'http://localhost:8000/api/v1';\r\n\r\n// Option 2: If your API server is running on a specific IP in your local network\r\n// const API_BASE_URL = 'http://192.168.1.XXX:8000/api/v1'; // Replace XXX with actual IP\r\n\r\n// Option 3: If you're using Docker or a specific container setup\r\n// const API_BASE_URL = 'http://host.docker.internal:8000/api/v1';\r\n\r\n// Generic API error handler\r\nconst handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`API Error: ${response.status} - ${response.statusText}. ${errorText}`);\r\n  }\r\n  \r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    return await response.json();\r\n  }\r\n  return await response.text();\r\n};\r\n\r\n// Generic fetch function with error handling and better debugging\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  console.log(`Making API request to: ${url}`);\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      mode: 'cors',\r\n      credentials: 'include', // Include credentials for CORS\r\n      ...options,\r\n    });\r\n    \r\n    return await handleApiResponse(response);\r\n  } catch (error) {\r\n    console.error(`API request failed for ${endpoint}:`, error);\r\n    console.error(`Full URL was: ${url}`);\r\n    \r\n    // More detailed error information\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      console.error('This might be a CORS or network connectivity issue');\r\n      console.error('Make sure your backend server is running and has CORS properly configured');\r\n      console.error('Backend should allow origin: http://localhost:3000');\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Test connection function\r\nexport const testApiConnection = async () => {\r\n  try {\r\n    console.log(`Testing API connection to: ${API_BASE_URL}`);\r\n    \r\n    // Try a simple health check or users endpoint\r\n    const response = await fetch(`${API_BASE_URL}/users`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      mode: 'cors',\r\n    });\r\n    \r\n    if (response.ok) {\r\n      console.log('✅ API connection successful');\r\n      return true;\r\n    } else {\r\n      console.error('❌ API connection failed:', response.status, response.statusText);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ API connection test failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Users API\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const data = await apiRequest('/users');\r\n    console.log('Users API response:', data);\r\n    \r\n    // Handle different response structures\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    } else if (data.result && Array.isArray(data.result.data)) {\r\n      return data.result.data;\r\n    } else if (data.data && Array.isArray(data.data)) {\r\n      return data.data;\r\n    } else if (data.users && Array.isArray(data.users)) {\r\n      return data.users;\r\n    } else {\r\n      console.warn('Unexpected users API response structure:', data);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch users:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getUserById = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/users/${id}`);\r\n    console.log(`User ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch user ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createUser = async (userData) => {\r\n  try {\r\n    const data = await apiRequest('/users', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n    console.log('Create user API response:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to create user:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUser = async (id, userData) => {\r\n  try {\r\n    const data = await apiRequest(`/users/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(userData),\r\n    });\r\n    console.log(`Update user ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to update user ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteUser = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/users/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    console.log(`Delete user ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to delete user ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Donations API\r\nexport const getAllDonations = async () => {\r\n  try {\r\n    const data = await apiRequest('/donations');\r\n    console.log('Donations API response:', data);\r\n    \r\n    // Handle different response structures\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    } else if (data.result && Array.isArray(data.result.data)) {\r\n      return data.result.data;\r\n    } else if (data.data && Array.isArray(data.data)) {\r\n      return data.data;\r\n    } else if (data.donations && Array.isArray(data.donations)) {\r\n      return data.donations;\r\n    } else {\r\n      console.warn('Unexpected donations API response structure:', data);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch donations:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getDonationById = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/donations/${id}`);\r\n    console.log(`Donation ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch donation ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createDonation = async (donationData) => {\r\n  try {\r\n    const data = await apiRequest('/donations', {\r\n      method: 'POST',\r\n      body: JSON.stringify(donationData),\r\n    });\r\n    console.log('Create donation API response:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to create donation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateDonation = async (id, donationData) => {\r\n  try {\r\n    const data = await apiRequest(`/donations/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(donationData),\r\n    });\r\n    console.log(`Update donation ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to update donation ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteDonation = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/donations/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    console.log(`Delete donation ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to delete donation ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Orders API\r\nexport const getAllOrders = async () => {\r\n  try {\r\n    const data = await apiRequest('/orders');\r\n    console.log('Orders API response:', data);\r\n    \r\n    // Handle different response structures\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    } else if (data.result && Array.isArray(data.result.data)) {\r\n      return data.result.data;\r\n    } else if (data.data && Array.isArray(data.data)) {\r\n      return data.data;\r\n    } else if (data.orders && Array.isArray(data.orders)) {\r\n      return data.orders;\r\n    } else {\r\n      console.warn('Unexpected orders API response structure:', data);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch orders:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getOrderById = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/orders/${id}`);\r\n    console.log(`Order ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch order ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const createOrder = async (orderData) => {\r\n  try {\r\n    const data = await apiRequest('/orders', {\r\n      method: 'POST',\r\n      body: JSON.stringify(orderData),\r\n    });\r\n    console.log('Create order API response:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to create order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateOrder = async (id, orderData) => {\r\n  try {\r\n    const data = await apiRequest(`/orders/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(orderData),\r\n    });\r\n    console.log(`Update order ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to update order ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteOrder = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/orders/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    console.log(`Delete order ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to delete order ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Utility functions for data processing\r\nexport const processUsersData = (users) => {\r\n  if (!Array.isArray(users)) return [];\r\n  \r\n  return users.map(user => ({\r\n    ...user,\r\n    // Add any data transformations here\r\n    id: user._id || user.id,\r\n    gender: user.user_gender || 'Unknown',\r\n  }));\r\n};\r\n\r\nexport const processDonationsData = (donations) => {\r\n  if (!Array.isArray(donations)) return [];\r\n  \r\n  return donations.map(donation => ({\r\n    ...donation,\r\n    // Add any data transformations here\r\n    id: donation._id || donation.donation_id,\r\n    amount: Number(donation.donation_amt) || 0,\r\n    dsgd_amount: Number(donation.donation_dsgd_amt) || 0,\r\n    datetime: donation.donation_datetime,\r\n    charity_id: donation.charity_id,\r\n    status: donation.donation_status,\r\n    type: donation.donation_type,\r\n    cause: donation.donation_cause,\r\n    user_id: donation.user_id,\r\n  }));\r\n};\r\n\r\nexport const processOrdersData = (orders) => {\r\n  if (!Array.isArray(orders)) return [];\r\n  \r\n  return orders.map(order => ({\r\n    ...order,\r\n    // Add any data transformations here\r\n    id: order._id || order.id,\r\n    cost: Number(order.order_cost) || 0,\r\n    merchant: order.merchant_name || 'Unknown',\r\n  }));\r\n};\r\n\r\n// Dashboard specific API calls\r\nexport const getDashboardData = async () => {\r\n  try {\r\n    const [users, donations, orders] = await Promise.all([\r\n      getAllUsers(),\r\n      getAllDonations(),\r\n      getAllOrders()\r\n    ]);\r\n\r\n    return {\r\n      users: processUsersData(users),\r\n      donations: processDonationsData(donations),\r\n      orders: processOrdersData(orders),\r\n    };\r\n  } catch (error) {\r\n    console.error('Failed to fetch dashboard data:', error);\r\n    return {\r\n      users: [],\r\n      donations: [],\r\n      orders: [],\r\n    };\r\n  }\r\n};\r\n\r\n// Export API base URL for other components if needed\r\nexport { API_BASE_URL };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}