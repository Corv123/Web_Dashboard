{"ast":null,"code":"// Environment-based API configuration\nconst getApiBaseUrl = () => {\n  // Check if we're in development or production\n  if (process.env.NODE_ENV === 'production') {\n    // Use your production API URL\n    return process.env.REACT_APP_API_BASE_URL || 'https://your-production-domain.com/api/v1';\n  } else {\n    // For local development, use localhost\n    // If your React app and API server are on the same machine\n    return process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\n  }\n};\nexport const API_BASE_URL = getApiBaseUrl();\n\n// Alternative: Direct configuration based on your setup\n// Uncomment one of these based on your actual setup:\n\n// Option 1: If React app and API server are on same machine (most common)\n// const API_BASE_URL = 'http://localhost:8000/api/v1';\n\n// Option 2: If your API server is running on a specific IP in your local network\n// const API_BASE_URL = 'http://192.168.1.XXX:8000/api/v1'; // Replace XXX with actual IP\n\n// Option 3: If you're using Docker or a specific container setup\n// const API_BASE_URL = 'http://host.docker.internal:8000/api/v1';\n\n// Generic API error handler\nexport const handleApiResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`API Error: ${response.status} - ${response.statusText}. ${errorText}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return await response.json();\n  }\n  return await response.text();\n};\n\n// Generic fetch function with error handling and better debugging\nexport const apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log(`Making API request to: ${url}`);\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      mode: 'cors',\n      credentials: 'include',\n      // Include credentials for CORS\n      ...options\n    });\n    return await handleApiResponse(response);\n  } catch (error) {\n    console.error(`API request failed for ${endpoint}:`, error);\n    console.error(`Full URL was: ${url}`);\n\n    // More detailed error information\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      console.error('This might be a CORS or network connectivity issue');\n      console.error('Make sure your backend server is running and has CORS properly configured');\n      console.error('Backend should allow origin: http://localhost:3000');\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["getApiBaseUrl","process","env","NODE_ENV","REACT_APP_API_BASE_URL","API_BASE_URL","handleApiResponse","response","ok","errorText","text","Error","status","statusText","contentType","headers","get","includes","json","apiRequest","endpoint","options","url","console","log","fetch","mode","credentials","error","name","message"],"sources":["C:/Users/mingj/Downloads/Web_Dashboard/src/services/api.js"],"sourcesContent":["// Environment-based API configuration\r\nconst getApiBaseUrl = () => {\r\n  // Check if we're in development or production\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // Use your production API URL\r\n    return process.env.REACT_APP_API_BASE_URL || 'https://your-production-domain.com/api/v1';\r\n  } else {\r\n    // For local development, use localhost\r\n    // If your React app and API server are on the same machine\r\n    return process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\r\n  }\r\n};\r\n\r\nexport const API_BASE_URL = getApiBaseUrl();\r\n\r\n// Alternative: Direct configuration based on your setup\r\n// Uncomment one of these based on your actual setup:\r\n\r\n// Option 1: If React app and API server are on same machine (most common)\r\n// const API_BASE_URL = 'http://localhost:8000/api/v1';\r\n\r\n// Option 2: If your API server is running on a specific IP in your local network\r\n// const API_BASE_URL = 'http://192.168.1.XXX:8000/api/v1'; // Replace XXX with actual IP\r\n\r\n// Option 3: If you're using Docker or a specific container setup\r\n// const API_BASE_URL = 'http://host.docker.internal:8000/api/v1';\r\n\r\n// Generic API error handler\r\nexport const handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`API Error: ${response.status} - ${response.statusText}. ${errorText}`);\r\n  }\r\n  \r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    return await response.json();\r\n  }\r\n  return await response.text();\r\n};\r\n\r\n// Generic fetch function with error handling and better debugging\r\nexport const apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  console.log(`Making API request to: ${url}`);\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      mode: 'cors',\r\n      credentials: 'include', // Include credentials for CORS\r\n      ...options,\r\n    });\r\n    \r\n    return await handleApiResponse(response);\r\n  } catch (error) {\r\n    console.error(`API request failed for ${endpoint}:`, error);\r\n    console.error(`Full URL was: ${url}`);\r\n    \r\n    // More detailed error information\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      console.error('This might be a CORS or network connectivity issue');\r\n      console.error('Make sure your backend server is running and has CORS properly configured');\r\n      console.error('Backend should allow origin: http://localhost:3000');\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA;AACA,MAAMA,aAAa,GAAGA,CAAA,KAAM;EAC1B;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC;IACA,OAAOF,OAAO,CAACC,GAAG,CAACE,sBAAsB,IAAI,2CAA2C;EAC1F,CAAC,MAAM;IACL;IACA;IACA,OAAOH,OAAO,CAACC,GAAG,CAACE,sBAAsB,IAAI,8BAA8B;EAC7E;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGL,aAAa,CAAC,CAAC;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO,MAAMM,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAAC,cAAcJ,QAAQ,CAACK,MAAM,MAAML,QAAQ,CAACM,UAAU,KAAKJ,SAAS,EAAE,CAAC;EACzF;EAEA,MAAMK,WAAW,GAAGP,QAAQ,CAACQ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3D,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B;EACA,OAAO,MAAMX,QAAQ,CAACG,IAAI,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC1D,MAAMC,GAAG,GAAG,GAAGjB,YAAY,GAAGe,QAAQ,EAAE;EACxCG,OAAO,CAACC,GAAG,CAAC,0BAA0BF,GAAG,EAAE,CAAC;EAE5C,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMkB,KAAK,CAACH,GAAG,EAAE;MAChCP,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGM,OAAO,CAACN;MACb,CAAC;MACDW,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE,SAAS;MAAE;MACxB,GAAGN;IACL,CAAC,CAAC;IAEF,OAAO,MAAMf,iBAAiB,CAACC,QAAQ,CAAC;EAC1C,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,0BAA0BR,QAAQ,GAAG,EAAEQ,KAAK,CAAC;IAC3DL,OAAO,CAACK,KAAK,CAAC,iBAAiBN,GAAG,EAAE,CAAC;;IAErC;IACA,IAAIM,KAAK,CAACC,IAAI,KAAK,WAAW,IAAID,KAAK,CAACE,OAAO,CAACb,QAAQ,CAAC,OAAO,CAAC,EAAE;MACjEM,OAAO,CAACK,KAAK,CAAC,oDAAoD,CAAC;MACnEL,OAAO,CAACK,KAAK,CAAC,2EAA2E,CAAC;MAC1FL,OAAO,CAACK,KAAK,CAAC,oDAAoD,CAAC;IACrE;IAEA,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}