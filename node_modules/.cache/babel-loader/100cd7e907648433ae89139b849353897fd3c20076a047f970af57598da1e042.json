{"ast":null,"code":"// Environment-based API configuration\nconst getApiBaseUrl = () => {\n  // Check if we're in development or production\n  if (process.env.NODE_ENV === 'production') {\n    // production handler (not implemented at staging process)\n    return process.env.REACT_APP_API_BASE_URL || 'https://your-production-domain.com/api/v1';\n  } else {\n    // For local development, use localhost\n    // If your React app and API server are on the same machine\n    return process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\n  }\n};\nconst API_BASE_URL = getApiBaseUrl();\n\n// Generic API error handler\nconst handleApiResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`API Error: ${response.status} - ${response.statusText}. ${errorText}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return await response.json();\n  }\n  return await response.text();\n};\n\n// Generic fetch function with error handling and better debugging\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log(`Making API request to: ${url}`);\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      mode: 'cors',\n      credentials: 'include',\n      // Include credentials for CORS\n      ...options\n    });\n    return await handleApiResponse(response);\n  } catch (error) {\n    console.error(`API request failed for ${endpoint}:`, error);\n    console.error(`Full URL was: ${url}`);\n\n    // More detailed error information\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      console.error('This might be a CORS or network connectivity issue');\n      console.error('Make sure your backend server is running and has CORS properly configured');\n      console.error('Backend should allow origin: http://localhost:3000');\n    }\n    throw error;\n  }\n};\n\n// Test connection function\nexport const testApiConnection = async () => {\n  try {\n    console.log(`Testing API connection to: ${API_BASE_URL}`);\n\n    // Try a simple health check or users endpoint\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors'\n    });\n    if (response.ok) {\n      console.log('✅ API connection successful');\n      return true;\n    } else {\n      console.error('❌ API connection failed:', response.status, response.statusText);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ API connection test failed:', error);\n    return false;\n  }\n};\n\n// Users API\nexport const getAllUsers = async () => {\n  try {\n    const data = await apiRequest('/users');\n    console.log('Users API response:', data);\n\n    // Handle different response structures using helper function\n    let users = [];\n    if (Array.isArray(data)) {\n      users = data;\n    } else if (data.result && Array.isArray(data.result.data)) {\n      users = data.result.data;\n    } else if (data.data && Array.isArray(data.data)) {\n      users = data.data;\n    } else if (data.users && Array.isArray(data.users)) {\n      users = data.users;\n    } else {\n      console.warn('Unexpected users API response structure:', data);\n      return [];\n    }\n\n    // Return raw data - processing will be done in utils\n    return users.map(user => ({\n      id: user.user_id || user._id || user.id,\n      user_id: user.user_id,\n      username: user.username,\n      user_mobile_number: user.user_mobile_number,\n      user_email: user.user_email,\n      user_allow_dark_mode: user.user_allow_dark_mode,\n      user_round_up_pref: user.user_round_up_pref,\n      user_discount_donate: user.user_discount_donate,\n      user_login_status: user.user_login_status,\n      user_gender: user.user_gender,\n      password: user.password,\n      user_default_donation_method: user.user_default_donation_method,\n      tokens: user.tokens,\n      // Keep original structure for backward compatibility\n      ...user\n    }));\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n    return [];\n  }\n};\nexport const getUserById = async id => {\n  try {\n    const data = await apiRequest(`/users/${id}`);\n    console.log(`User ${id} API response:`, data);\n\n    // Return normalized single user data structure\n    if (data) {\n      return {\n        id: data.user_id || data._id || data.id,\n        user_id: data.user_id,\n        username: data.username,\n        user_mobile_number: data.user_mobile_number,\n        user_email: data.user_email,\n        user_allow_dark_mode: data.user_allow_dark_mode,\n        user_round_up_pref: data.user_round_up_pref,\n        user_discount_donate: data.user_discount_donate,\n        user_login_status: data.user_login_status,\n        user_gender: data.user_gender,\n        password: data.password,\n        user_default_donation_method: data.user_default_donation_method,\n        tokens: data.tokens,\n        // Keep original structure for backward compatibility\n        ...data\n      };\n    }\n    return data;\n  } catch (error) {\n    console.error(`Failed to fetch user ${id}:`, error);\n    return null;\n  }\n};\n\n// Donations API\nexport const getAllDonations = async () => {\n  try {\n    const data = await apiRequest('/donations');\n    console.log('Donations API response:', data);\n\n    // Handle different response structures\n    if (Array.isArray(data)) {\n      return data;\n    } else if (data.result && Array.isArray(data.result.data)) {\n      return data.result.data;\n    } else if (data.data && Array.isArray(data.data)) {\n      return data.data;\n    } else if (data.donations && Array.isArray(data.donations)) {\n      return data.donations;\n    } else {\n      console.warn('Unexpected donations API response structure:', data);\n      return [];\n    }\n  } catch (error) {\n    console.error('Failed to fetch donations:', error);\n    return [];\n  }\n};\nexport const getDonationById = async id => {\n  try {\n    const data = await apiRequest(`/donations/${id}`);\n    console.log(`Donation ${id} API response:`, data);\n    return data;\n  } catch (error) {\n    console.error(`Failed to fetch donation ${id}:`, error);\n    return null;\n  }\n};\n\n// Orders API\nexport const getAllOrders = async () => {\n  try {\n    const data = await apiRequest('/orders');\n    console.log('Orders API response:', data);\n\n    // Handle different response structures\n    let orders = [];\n    if (Array.isArray(data)) {\n      orders = data;\n    } else if (data.result && Array.isArray(data.result.data)) {\n      orders = data.result.data;\n    } else if (data.data && Array.isArray(data.data)) {\n      orders = data.data;\n    } else if (data.orders && Array.isArray(data.orders)) {\n      orders = data.orders;\n    } else {\n      console.warn('Unexpected orders API response structure:', data);\n      return [];\n    }\n\n    // Return raw data with minimal processing - detailed processing in utils\n    return orders.map(order => ({\n      id: order.order_id || order._id || order.id,\n      order_id: order.order_id,\n      order_status: order.order_status,\n      order_cost: Number(order.order_cost) || 0,\n      total_order_cost: Number(order.total_order_cost) || 0,\n      order_type: order.order_type,\n      merchant_name: order.merchant_name,\n      merchant_location: order.merchant_location,\n      order_complete_datetime: order.order_complete_datetime,\n      user_id: order.user_id,\n      order_tokens: order.order_tokens,\n      order_items: order.order_items || [],\n      // Keep original structure for backward compatibility\n      ...order\n    }));\n  } catch (error) {\n    console.error('Failed to fetch orders:', error);\n    return [];\n  }\n};\nexport const getOrderById = async id => {\n  try {\n    const data = await apiRequest(`/orders/${id}`);\n    console.log(`Order ${id} API response:`, data);\n\n    // Return normalized single order data structure\n    if (data) {\n      return {\n        id: data.order_id || data._id || data.id,\n        order_id: data.order_id,\n        order_status: data.order_status,\n        order_cost: Number(data.order_cost) || 0,\n        total_order_cost: Number(data.total_order_cost) || 0,\n        order_type: data.order_type,\n        merchant_name: data.merchant_name,\n        merchant_location: data.merchant_location,\n        order_complete_datetime: data.order_complete_datetime,\n        user_id: data.user_id,\n        order_tokens: data.order_tokens,\n        order_items: data.order_items || [],\n        // Keep original structure for backward compatibility\n        ...data\n      };\n    }\n    return data;\n  } catch (error) {\n    console.error(`Failed to fetch order ${id}:`, error);\n    return null;\n  }\n};\n\n// Export API base URL for other components if needed\nexport { API_BASE_URL };","map":{"version":3,"names":["getApiBaseUrl","process","env","NODE_ENV","REACT_APP_API_BASE_URL","API_BASE_URL","handleApiResponse","response","ok","errorText","text","Error","status","statusText","contentType","headers","get","includes","json","apiRequest","endpoint","options","url","console","log","fetch","mode","credentials","error","name","message","testApiConnection","method","getAllUsers","data","users","Array","isArray","result","warn","map","user","id","user_id","_id","username","user_mobile_number","user_email","user_allow_dark_mode","user_round_up_pref","user_discount_donate","user_login_status","user_gender","password","user_default_donation_method","tokens","getUserById","getAllDonations","donations","getDonationById","getAllOrders","orders","order","order_id","order_status","order_cost","Number","total_order_cost","order_type","merchant_name","merchant_location","order_complete_datetime","order_tokens","order_items","getOrderById"],"sources":["C:/Users/mingj/Downloads/Web_Dashboard/src/services/api.js"],"sourcesContent":["// Environment-based API configuration\r\nconst getApiBaseUrl = () => {\r\n  // Check if we're in development or production\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // production handler (not implemented at staging process)\r\n    return process.env.REACT_APP_API_BASE_URL || 'https://your-production-domain.com/api/v1';\r\n  } else {\r\n    // For local development, use localhost\r\n    // If your React app and API server are on the same machine\r\n    return process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\r\n  }\r\n};\r\n\r\nconst API_BASE_URL = getApiBaseUrl();\r\n\r\n// Generic API error handler\r\nconst handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`API Error: ${response.status} - ${response.statusText}. ${errorText}`);\r\n  }\r\n  \r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    return await response.json();\r\n  }\r\n  return await response.text();\r\n};\r\n\r\n// Generic fetch function with error handling and better debugging\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  console.log(`Making API request to: ${url}`);\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      mode: 'cors',\r\n      credentials: 'include', // Include credentials for CORS\r\n      ...options,\r\n    });\r\n    \r\n    return await handleApiResponse(response);\r\n  } catch (error) {\r\n    console.error(`API request failed for ${endpoint}:`, error);\r\n    console.error(`Full URL was: ${url}`);\r\n    \r\n    // More detailed error information\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      console.error('This might be a CORS or network connectivity issue');\r\n      console.error('Make sure your backend server is running and has CORS properly configured');\r\n      console.error('Backend should allow origin: http://localhost:3000');\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Test connection function\r\nexport const testApiConnection = async () => {\r\n  try {\r\n    console.log(`Testing API connection to: ${API_BASE_URL}`);\r\n    \r\n    // Try a simple health check or users endpoint\r\n    const response = await fetch(`${API_BASE_URL}/users`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      mode: 'cors',\r\n    });\r\n    \r\n    if (response.ok) {\r\n      console.log('✅ API connection successful');\r\n      return true;\r\n    } else {\r\n      console.error('❌ API connection failed:', response.status, response.statusText);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ API connection test failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Users API\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const data = await apiRequest('/users');\r\n    console.log('Users API response:', data);\r\n    \r\n    // Handle different response structures using helper function\r\n    let users = [];\r\n    if (Array.isArray(data)) {\r\n      users = data;\r\n    } else if (data.result && Array.isArray(data.result.data)) {\r\n      users = data.result.data;\r\n    } else if (data.data && Array.isArray(data.data)) {\r\n      users = data.data;\r\n    } else if (data.users && Array.isArray(data.users)) {\r\n      users = data.users;\r\n    } else {\r\n      console.warn('Unexpected users API response structure:', data);\r\n      return [];\r\n    }\r\n\r\n    // Return raw data - processing will be done in utils\r\n    return users.map(user => ({\r\n      id: user.user_id || user._id || user.id,\r\n      user_id: user.user_id,\r\n      username: user.username,\r\n      user_mobile_number: user.user_mobile_number,\r\n      user_email: user.user_email,\r\n      user_allow_dark_mode: user.user_allow_dark_mode,\r\n      user_round_up_pref: user.user_round_up_pref,\r\n      user_discount_donate: user.user_discount_donate,\r\n      user_login_status: user.user_login_status,\r\n      user_gender: user.user_gender,\r\n      password: user.password,\r\n      user_default_donation_method: user.user_default_donation_method,\r\n      tokens: user.tokens,\r\n      // Keep original structure for backward compatibility\r\n      ...user\r\n    }));\r\n  } catch (error) {\r\n    console.error('Failed to fetch users:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getUserById = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/users/${id}`);\r\n    console.log(`User ${id} API response:`, data);\r\n    \r\n    // Return normalized single user data structure\r\n    if (data) {\r\n      return {\r\n        id: data.user_id || data._id || data.id,\r\n        user_id: data.user_id,\r\n        username: data.username,\r\n        user_mobile_number: data.user_mobile_number,\r\n        user_email: data.user_email,\r\n        user_allow_dark_mode: data.user_allow_dark_mode,\r\n        user_round_up_pref: data.user_round_up_pref,\r\n        user_discount_donate: data.user_discount_donate,\r\n        user_login_status: data.user_login_status,\r\n        user_gender: data.user_gender,\r\n        password: data.password,\r\n        user_default_donation_method: data.user_default_donation_method,\r\n        tokens: data.tokens,\r\n        // Keep original structure for backward compatibility\r\n        ...data\r\n      };\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch user ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Donations API\r\nexport const getAllDonations = async () => {\r\n  try {\r\n    const data = await apiRequest('/donations');\r\n    console.log('Donations API response:', data);\r\n    \r\n    // Handle different response structures\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    } else if (data.result && Array.isArray(data.result.data)) {\r\n      return data.result.data;\r\n    } else if (data.data && Array.isArray(data.data)) {\r\n      return data.data;\r\n    } else if (data.donations && Array.isArray(data.donations)) {\r\n      return data.donations;\r\n    } else {\r\n      console.warn('Unexpected donations API response structure:', data);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch donations:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getDonationById = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/donations/${id}`);\r\n    console.log(`Donation ${id} API response:`, data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch donation ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Orders API\r\nexport const getAllOrders = async () => {\r\n  try {\r\n    const data = await apiRequest('/orders');\r\n    console.log('Orders API response:', data);\r\n    \r\n    // Handle different response structures\r\n    let orders = [];\r\n    if (Array.isArray(data)) {\r\n      orders = data;\r\n    } else if (data.result && Array.isArray(data.result.data)) {\r\n      orders = data.result.data;\r\n    } else if (data.data && Array.isArray(data.data)) {\r\n      orders = data.data;\r\n    } else if (data.orders && Array.isArray(data.orders)) {\r\n      orders = data.orders;\r\n    } else {\r\n      console.warn('Unexpected orders API response structure:', data);\r\n      return [];\r\n    }\r\n\r\n    // Return raw data with minimal processing - detailed processing in utils\r\n    return orders.map(order => ({\r\n      id: order.order_id || order._id || order.id,\r\n      order_id: order.order_id,\r\n      order_status: order.order_status,\r\n      order_cost: Number(order.order_cost) || 0,\r\n      total_order_cost: Number(order.total_order_cost) || 0,\r\n      order_type: order.order_type,\r\n      merchant_name: order.merchant_name,\r\n      merchant_location: order.merchant_location,\r\n      order_complete_datetime: order.order_complete_datetime,\r\n      user_id: order.user_id,\r\n      order_tokens: order.order_tokens,\r\n      order_items: order.order_items || [],\r\n      // Keep original structure for backward compatibility\r\n      ...order\r\n    }));\r\n  } catch (error) {\r\n    console.error('Failed to fetch orders:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getOrderById = async (id) => {\r\n  try {\r\n    const data = await apiRequest(`/orders/${id}`);\r\n    console.log(`Order ${id} API response:`, data);\r\n    \r\n    // Return normalized single order data structure\r\n    if (data) {\r\n      return {\r\n        id: data.order_id || data._id || data.id,\r\n        order_id: data.order_id,\r\n        order_status: data.order_status,\r\n        order_cost: Number(data.order_cost) || 0,\r\n        total_order_cost: Number(data.total_order_cost) || 0,\r\n        order_type: data.order_type,\r\n        merchant_name: data.merchant_name,\r\n        merchant_location: data.merchant_location,\r\n        order_complete_datetime: data.order_complete_datetime,\r\n        user_id: data.user_id,\r\n        order_tokens: data.order_tokens,\r\n        order_items: data.order_items || [],\r\n        // Keep original structure for backward compatibility\r\n        ...data\r\n      };\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch order ${id}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Export API base URL for other components if needed\r\nexport { API_BASE_URL };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}